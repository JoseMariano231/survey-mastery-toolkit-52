
@model SuggestionReportViewModel
@{
    ViewData["Title"] = "Suggestion Reports";
}

<div class="bg-background p-8">
    <div class="max-w-7xl mx-auto">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title flex items-center gap-2">
                    <i class="icon-bar-chart"></i> Suggestion Reports
                </h2>
                <p class="card-description">
                    View monthly reports and trends of customer suggestions
                </p>
                
                <div class="flex justify-end mt-4">
                    <form asp-action="Reports" method="get" class="flex gap-2">
                        <select name="months" class="form-select w-[180px]">
                            <option value="3" selected="@(Model.MonthsRange == 3)">Last 3 months</option>
                            <option value="6" selected="@(Model.MonthsRange == 6)">Last 6 months</option>
                            <option value="12" selected="@(Model.MonthsRange == 12)">Last 12 months</option>
                        </select>
                        <button type="submit" class="btn btn-outline">Apply</button>
                    </form>
                </div>
            </div>
            
            <div class="card-content">
                <div class="tab-container">
                    <div class="tab-list">
                        <button class="tab-item active" data-tab="chart">Chart View</button>
                        <button class="tab-item" data-tab="monthly">Monthly Breakdown</button>
                    </div>
                    
                    <div class="tab-content">
                        <div class="tab-pane active" id="chart-tab">
                            <div class="h-[300px] w-full">
                                <canvas id="suggestionChart"></canvas>
                            </div>
                        </div>
                        
                        <div class="tab-pane" id="monthly-tab">
                            <div class="space-y-6">
                                @foreach (var month in Model.Report.MonthlyData)
                                {
                                    <div class="border rounded-lg p-4">
                                        <h3 class="text-lg font-medium flex items-center gap-2">
                                            <i class="icon-calendar"></i>
                                            @month.Month @month.Year
                                        </h3>
                                        
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                                            <div class="bg-muted rounded-md p-3">
                                                <p class="text-sm text-muted-foreground">Total Suggestions</p>
                                                <p class="text-2xl font-bold">@month.TotalSuggestions</p>
                                            </div>
                                            
                                            <div class="bg-muted rounded-md p-3">
                                                <p class="text-sm text-muted-foreground">Implementation Rate</p>
                                                <p class="text-2xl font-bold">
                                                    @(month.TotalSuggestions > 0 
                                                        ? Math.Round((double)month.ImplementedSuggestions / month.TotalSuggestions * 100)
                                                        : 0)%
                                                </p>
                                            </div>
                                            
                                            <div class="bg-muted rounded-md p-3">
                                                <p class="text-sm text-muted-foreground">Implemented</p>
                                                <p class="text-2xl font-bold">@month.ImplementedSuggestions</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab switching
            const tabButtons = document.querySelectorAll('.tab-item');
            const tabPanes = document.querySelectorAll('.tab-pane');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const tabId = button.getAttribute('data-tab');
                    
                    // Hide all panes
                    tabPanes.forEach(pane => pane.classList.remove('active'));
                    
                    // Show selected pane
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                    
                    // Update active tab button
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                });
            });
            
            // Chart
            const ctx = document.getElementById('suggestionChart').getContext('2d');
            const monthlyData = @Html.Raw(Json.Serialize(Model.Report.MonthlyData));
            
            const chartData = {
                labels: monthlyData.map(m => `${m.month} ${m.year}`),
                datasets: [
                    {
                        label: 'Total Suggestions',
                        data: monthlyData.map(m => m.totalSuggestions),
                        backgroundColor: 'rgba(136, 132, 216, 0.7)',
                        borderColor: 'rgb(136, 132, 216)',
                        borderWidth: 1
                    },
                    {
                        label: 'Implemented',
                        data: monthlyData.map(m => m.implementedSuggestions),
                        backgroundColor: 'rgba(130, 202, 157, 0.7)',
                        borderColor: 'rgb(130, 202, 157)',
                        borderWidth: 1
                    }
                ]
            };
            
            new Chart(ctx, {
                type: 'bar',
                data: chartData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });
    </script>
}
